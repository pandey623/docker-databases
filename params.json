{"name":"Docker-databases","tagline":"Shell helper for launching common databases in docker containers","body":"Databases in Docker\r\n===================\r\n\r\nShell helper for launching common databases in docker containers.\r\n\r\nRequirements\r\n------------\r\n\r\n* Docker 0.8+ (from docker.io)\r\n\r\nSupported Databases\r\n-------------------\r\n\r\n* MySQL - [OrchardUp/Mysql](https://github.com/orchardup/docker-mysql)\r\n* PostgreSQL - [Zaiste/PostgreSQL](https://github.com/zaiste/docker-postgresql)\r\n* Redis - [Dockerfile/Redis](https://github.com/dockerfile/redis)\r\n* MongoDB - [Dockerfile/MongoDB](https://github.com/dockerfile/mongodb)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n1. Git clone this repository `git clone git@github.com:thestonefox/docker-databases.git`\r\n2. cd to correct directory `cd docker-databases`\r\n\r\nUsage\r\n-----\r\n\r\n###Starting a db container\r\n```bash\r\nsudo ./ddb.sh <db-type>\r\n```\r\n\r\n**Example:** `sudo ./ddb.sh mysql`\r\n\r\n###Terminating a db container\r\n```bash\r\nsudo ./ddb-kill.sh <container-name>\r\n```\r\n\r\n**Example:** `sudo ./ddb-kill.sh mysqldb`\r\n\r\n\r\nRuntime Options\r\n---------------\r\n\r\nYou can customise the database settings when running the ddb.sh script. \r\n\r\n```bash\r\n# mysql/postgresql only\r\n- username\r\n- password\r\n- database name\r\n\r\n# all types\r\n- docker container name\r\n```\r\n\r\nThe below example will create a new docker mysql container with the following details:\r\n\r\n* **mysql username:** myuser\r\n* **mysql password:** mypass\r\n* **mysql default database:** mytestdb\r\n* **docker container name:** mysqldb\r\n\r\n###Creating the docker db container\r\n\r\n* Step 1. Run the ddb.sh script for mysql: \r\n```bash\r\nsudo ./ddb.sh mysql\r\n```\r\n* Step 2. You will be prompted to enter a default username:\r\n```bash\r\nPlease enter db username [default: root]: myuser\r\n```\r\n* Step 3. You will be prompted to enter a default password:\r\n```bash\r\nPlease enter db password [default: password]: mypass\r\n```\r\n* Step 4. You will be prompted to enter a default database schema name:\r\n```bash\r\nPlease enter db name [default: test]: mytestdb\r\n```\r\n* Step 5. You will be prompted to enter a docker container name:\r\n```bash\r\nPlease enter docker container name [default: mysql]: mysqldb\r\n```\r\n* Step 6. When the above details have been entered, the docker container will pull and run and return the container ID\r\n* Step 7. Run `sudo docker ps` to list the running docker containers\r\n```bash\r\nCONTAINER ID        IMAGE                        COMMAND               CREATED             STATUS              PORTS                                        NAMES\r\n9f7c38765cd2        orchardup/mysql:latest       /usr/local/bin/run    3 seconds ago       Up 2 seconds        0.0.0.0:3306->3306/tcp                       mysqldb  \r\n```\r\n\r\nYou should now see your running docker mysql container with the name \"mysqldb\" with the default mysql port (3306) already mapped through to the container.\r\n\r\n\r\n###Terminating the container\r\n\r\n* Step 1. Run the ddb-kill.sh script passing in the container name to terminate\r\n```bash\r\nsudo ./ddb-kill.sh mysqldb\r\n```\r\n* Step 2. The container will be stopped and then deleted\r\n* Step 3. Run `sudo docker ps` to list the running docker containers\r\n```bash\r\nCONTAINER ID        IMAGE                        COMMAND               CREATED             STATUS              PORTS                                        NAMES\r\n```\r\n\r\nYou should now see your docker database container has been removed from the containers list.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}